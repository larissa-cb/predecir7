# app.py
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
import joblib

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Predictor de Deserci√≥n Universitaria",
    page_icon="üéì",
    layout="wide"
)

# T√≠tulo principal
st.title("üéì Sistema de Predicci√≥n de Deserci√≥n Estudiantil")
st.markdown("Sistema inteligente para identificar estudiantes en riesgo de abandono acad√©mico")

# Simular un modelo entrenado (en producci√≥n real se cargar√≠a desde un archivo)
@st.cache_resource
def create_model():
    # Crear un modelo simple con 10 features
    model = RandomForestClassifier(n_estimators=50, random_state=42)
    
    # Generar datos de entrenamiento sint√©ticos con 10 features
    np.random.seed(42)
    X_train = np.random.randn(1000, 10)
    y_train = np.random.choice([0, 1, 2], size=1000, p=[0.4, 0.3, 0.3])
    
    # Entrenar el modelo
    model.fit(X_train, y_train)
    return model

# Inicializar modelo y scaler
model = create_model()
scaler = StandardScaler()

# Sidebar para entrada de datos
st.sidebar.header("üìã Informaci√≥n del Estudiante")

# Definir las 10 features que el modelo espera
st.sidebar.subheader("Datos Acad√©micos Clave")
previous_grade = st.sidebar.slider("Calificaci√≥n Previa (0-200)", 0, 200, 120)
attendance = st.sidebar.slider("Asistencia (%)", 0, 100, 85)
units_approved = st.sidebar.slider("Materias Aprobadas 1er Sem", 0, 10, 4)
current_avg = st.sidebar.slider("Promedio Actual (0-20)", 0, 20, 12)

st.sidebar.subheader("Datos Personales")
age = st.sidebar.slider("Edad", 17, 50, 20)
scholarship = st.sidebar.selectbox("¬øTiene Beca?", ["No", "S√≠"])
tuition_fees = st.sidebar.selectbox("¬øMatr√≠cula al D√≠a?", ["S√≠", "No"])
debtor = st.sidebar.selectbox("¬øEs Deudor?", ["No", "S√≠"])
international = st.sidebar.selectbox("¬øEstudiante Internacional?", ["No", "S√≠"])
displaced = st.sidebar.selectbox("¬øViene de Zona Rural?", ["No", "S√≠"])

# Bot√≥n para predecir
if st.sidebar.button("üîç Predecir Riesgo de Deserci√≥n"):
    try:
        # Preparar los datos en el orden correcto (10 features)
        input_data = np.array([[
            previous_grade,        # Feature 1
            attendance,            # Feature 2
            units_approved,        # Feature 3
            current_avg,           # Feature 4
            age,                   # Feature 5
            1 if scholarship == "S√≠" else 0,  # Feature 6
            1 if tuition_fees == "S√≠" else 0, # Feature 7
            1 if debtor == "S√≠" else 0,       # Feature 8
            1 if international == "S√≠" else 0, # Feature 9
            1 if displaced == "S√≠" else 0      # Feature 10
        ]])
        
        # Escalar los datos
        input_scaled = scaler.fit_transform(input_data)
        
        # Hacer predicci√≥n
        prediction = model.predict(input_scaled)[0]
        probabilities = model.predict_proba(input_scaled)[0]
        
        # Mapear predicciones
        risk_levels = ["üö® Alto Riesgo (Abandono)", "‚ö†Ô∏è Riesgo Medio (Enrolado)", "‚úÖ Bajo Riesgo (Graduado)"]
        risk_level = risk_levels[prediction]
        
        # Mostrar resultados
        st.success("### üìä Resultados de la Predicci√≥n")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Nivel de Riesgo", risk_level)
        with col2:
            confidence = probabilities[prediction] * 100
            st.metric("Confianza", f"{confidence:.1f}%")
        with col3:
            risk_score = probabilities[0] * 100  # Probabilidad de abandono
            st.metric("Prob. Abandono", f"{risk_score:.1f}%")
        
        # Barra de progreso para visualizar el riesgo
        st.progress(probabilities[0], text=f"Probabilidad de Abandono: {probabilities[0]*100:.1f}%")
        
        # Mostrar probabilidades de todas las clases
        st.subheader("üìà Probabilidades por Categor√≠a")
        prob_df = pd.DataFrame({
            'Categor√≠a': risk_levels,
            'Probabilidad': [f"{p*100:.1f}%" for p in probabilities]
        })
        st.dataframe(prob_df, hide_index=True, use_container_width=True)
        
        # Recomendaciones basadas en el riesgo
        st.subheader("üéØ Plan de Acci√≥n Recomendado")
        
        if prediction == 0:  # Alto riesgo
            st.error("""
            **üö® INTERVENCI√ìN INMEDIATA REQUERIDA**
            
            **Acciones Prioritarias:**
            - Reuni√≥n urgente con consejero acad√©mico (48 horas m√°ximo)
            - Evaluaci√≥n econ√≥mica completa
            - Programa de mentor√≠a intensiva (3 sesiones/semana)
            - Contacto inmediato con familia/tutores
            - Revisi√≥n de carga acad√©mica
            - Considerar reducci√≥n temporal de materias
            
            **Plazo:** Intervenci√≥n en 48 horas
            """)
            
        elif prediction == 1:  # Riesgo medio
            st.warning("""
            **‚ö†Ô∏è MONITOREO REFORZADO NECESARIO**
            
            **Acciones Recomendadas:**
            - Evaluaci√≥n acad√©mica quincenal
            - Talleres de habilidades de estudio
            - Mentor√≠a con estudiante avanzado
            - Grupo de apoyo entre pares
            - Revisi√≥n de t√©cnicas de estudio
            - Seguimiento de asistencia
            
            **Seguimiento:** Revisi√≥n mensual
            """)
            
        else:  # Bajo riesgo
            st.success("""
            **‚úÖ SITUACI√ìN ESTABLE**
            
            **Acciones de Mantenimiento:**
            - Continuar con apoyo actual
            - Participaci√≥n en actividades extracurriculares
            - Oportunidades de desarrollo profesional
            - Preparaci√≥n para pr√°cticas/pasant√≠as
            - Monitoreo semestral est√°ndar
            
            **Enfoque:** Desarrollo y crecimiento personal
            """)
        
        # Factores de riesgo identificados
        st.subheader("üîç Factores de Riesgo Detectados")
        
        risk_factors = []
        if previous_grade < 100:
            risk_factors.append(f"Calificaci√≥n previa baja ({previous_grade}/200)")
        if attendance < 75:
            risk_factors.append(f"Asistencia preocupante ({attendance}%)")
        if units_approved < 4:
            risk_factors.append(f"Bajo rendimiento acad√©mico ({units_approved} materias aprobadas)")
        if current_avg < 10:
            risk_factors.append(f"Promedio actual bajo ({current_avg}/20)")
        if scholarship == "No":
            risk_factors.append("Falta de apoyo econ√≥mico (sin beca)")
        if tuition_fees == "No":
            risk_factors.append("Problemas de pago de matr√≠cula")
        if debtor == "S√≠":
            risk_factors.append("Situaci√≥n de deuda acad√©mica")
        if age > 25:
            risk_factors.append("Edad mayor al promedio t√≠pico")
        
        if risk_factors:
            st.write("**Factores identificados:**")
            for factor in risk_factors:
                st.write(f"‚Ä¢ {factor}")
        else:
            st.success("‚úÖ No se detectaron factores de riesgo significativos")
            
        # Informaci√≥n del estudiante
        st.subheader("üìã Resumen del Estudiante")
        
        info_col1, info_col2 = st.columns(2)
        with info_col1:
            st.write("**Datos Acad√©micos:**")
            st.write(f"- Calificaci√≥n previa: {previous_grade}/200")
            st.write(f"- Asistencia: {attendance}%")
            st.write(f"- Materias aprobadas: {units_approved}/10")
            st.write(f"- Promedio actual: {current_avg}/20")
            
        with info_col2:
            st.write("**Datos Personales:**")
            st.write(f"- Edad: {age} a√±os")
            st.write(f"- Beca: {scholarship}")
            st.write(f"- Matr√≠cula al d√≠a: {tuition_fees}")
            st.write(f"- Deudor: {debtor}")
            st.write(f"- Internacional: {international}")
            st.write(f"- Zona rural: {displaced}")
        
    except Exception as e:
        st.error(f"Error en la predicci√≥n: {str(e)}")
        st.info("""
        ‚ö†Ô∏è **Soluci√≥n de problemas:**
        - Verifique que todos los campos est√©n completos
        - Aseg√∫rese de usar valores v√°lidos
        - Si el error persiste, contacte al administrador
        """)

else:
    # Pantalla inicial
    st.info("üëà Complete la informaci√≥n del estudiante en la barra lateral y haga clic en 'Predecir Riesgo de Deserci√≥n'")
    
    # Informaci√≥n sobre el sistema
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Acerca del Sistema")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("""
        **üéØ Objetivo:**
        - Identificar estudiantes en riesgo de abandono
        - Proporcionar intervenciones tempranas
        - Mejorar las tasas de retenci√≥n estudiantil
        - Optimizar recursos de apoyo acad√©mico
        
        **üìä M√©tricas consideradas:**
        - Rendimiento acad√©mico previo
        - Asistencia y participaci√≥n
        - Situaci√≥n econ√≥mica
        - Datos demogr√°ficos
        """)
    
    with col2:
        st.write("""
        **üîß Tecnolog√≠as:**
        - Machine Learning: Random Forest
        - Framework: Streamlit
        - Procesamiento: Scikit-learn
        - An√°lisis: Pandas, NumPy
        
        **üéì Beneficios:**
        - Detecci√≥n temprana (6-12 meses de anticipaci√≥n)
        - Intervenciones personalizadas
        - Ahorro de recursos institucionales
        - Mejora del √©xito estudiantil
        """)

# Footer
st.sidebar.markdown("---")
st.sidebar.info("""
**üìû Soporte T√©cnico:**
- Email: larissac@ucm.es
""")

st.markdown("---")
st.caption("Sistema de Predicci√≥n de Deserci√≥n Universitaria v2.0 | Desarrollado con Streamlit y Machine Learning")